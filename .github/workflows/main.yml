name: .NET Core Desktop

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:  # Allows manual triggering if needed

jobs:
  build:
    strategy:
      matrix:
        configuration: [Release]

    runs-on: windows-latest

    env:
      Project_Name: Ivi.DriverCore/Ivi.DriverCore/Ivi.DriverCore.csproj

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v2

    - name: Set Dynamic Version
      id: set_version
      run: |
        echo "::set-output name=version::1.0.0.${{ github.run_number }}"
      shell: bash

    - name: Run PowerShell Script from File
      run:  ${{ github.workspace }}\Ivi.DriverCore\SharedComponentBuildScript.ps1 -version "${{ steps.set_version.outputs.version }}"
      shell: pwsh  # Use 'powershell' for Windows PowerShell

    - name: Decode the certificate
      run: |
       $certBytes = [System.Convert]::FromBase64String("${{ secrets.CERTIFICATE_PFX }}")
       [IO.File]::WriteAllBytes("cert.pfx", $certBytes)

    - name: Import the signing certificate
      run: |
        Import-PfxCertificate -FilePath ./cert.pfx -CertStoreLocation Cert:\CurrentUser\My -Password (ConvertTo-SecureString "${{ secrets.CERTIFICATE_PASSWORD }}" -AsPlainText -Force)

    - name: Sign the assemblies
      run: |
        $timestampUrl = "http://timestamp.digicert.com"
        $filesToSign = Get-ChildItem -Recurse -Path './Ivi.DriverCore/build/Release' -Filter *.dll
        foreach ($file in $filesToSign) {
            & "C:\Program Files (x86)\Microsoft SDKs\ClickOnce\SignTool\signtool.exe" sign /f ./cert.pfx /p "${{ secrets.CERTIFICATE_PASSWORD }}" /t $timestampUrl /v $file.FullName
        } 

    - name: Sign NuGet Package
      run: |
        $nupkgPath = Get-ChildItem -Path './Ivi.DriverCore/build/Release' -Filter *.nupkg
        write-host $nupkgPath
        dotnet nuget sign $nupkgPath.FullName `
          --certificate-path cert.pfx `
          --certificate-password ${{ secrets.CERTIFICATE_PASSWORD }} `
          --timestamper "http://timestamp.digicert.com" `
          --verbosity detailed
      shell: pwsh

    - name: Publish NuGet Package
      run: |
        $nupkgPath = Get-ChildItem -Path './Ivi.DriverCore/build/Release' -Filter *.nupkg
        dotnet nuget push $nupkgPath --source https://nuget.pkg.github.com/dilskhan/index.json --api-key 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
      shell: pwsh
